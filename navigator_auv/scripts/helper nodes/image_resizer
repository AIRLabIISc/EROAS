#!/usr/bin/env python

import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import cv2

class ImageResizer:
    def __init__(self):
        # Initialize the node
        rospy.init_node('image_resizer', anonymous=True)

        # Create a CvBridge object
        self.bridge = CvBridge()

        # Subscriber to the input image topic
        self.image_sub = rospy.Subscriber('/blueview_p900/sonar_image', Image, self.callback)

        # Publisher to the resized image topic
        self.resized_image_pub = rospy.Publisher('/blueview_p900/sonar_image_resized', Image, queue_size=10)

    def callback(self, image_msg):
        try:
            # Convert the ROS image message to a CV image
            cv_image = self.bridge.imgmsg_to_cv2(image_msg, desired_encoding='bgr8')

            # Get the dimensions of the image
            height, width = cv_image.shape[:2]

            # Calculate the new dimensions (half the size)
            new_width = width 
            new_height = height // 2

            # Resize the image
            resized_image = cv2.resize(cv_image, (new_width, new_height))

            # Convert the resized image back to a ROS image message
            resized_image_msg = self.bridge.cv2_to_imgmsg(resized_image, encoding='bgr8')

            # Publish the resized image
            self.resized_image_pub.publish(resized_image_msg)

        except CvBridgeError as e:
            rospy.logerr(f'CvBridge Error: {e}')

    def run(self):
        rospy.spin()

if __name__ == '__main__':
    # Make the script executable
    import sys
    if not rospy.is_shutdown():
        image_resizer = ImageResizer()
        image_resizer.run()
